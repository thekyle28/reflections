What happens when you initialize a repository? What do you need to do?

To initialize a repository you use the command git init, and initializing a repository creates an .git file, which holds meta data for the history of the files in that directory. But it does not commit until you commit your first one.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area allows you to build up specific files that you wish to commit before pushing them into the online repository. 

How can you use the staging area to make sure you have one commit per logical change?

You can use the staging area to check differences between your current working directory and the staging area to make sure that you only have one logical change for your next commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be helpful to use when you wish to create an experimental feature, and they would also be useful if you wish to create a version of the current repository, but slighlty changed, such as an easier version of the asteroids game, or a version of the game in a different language. Branches would help by allowing you branch out into multiple versions of your project.

How do the diagrams help you visualize the branch structure?

The diagrams help me to visualize the structure by showing the arrows for each of the commits' parents, and by also showing the master branches, and where the branches are in the git log history.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches together is all of the new content from both of the branches before they were seperated. If a line of code was deleted from one branch and not in the other branch, then that line of code will be deleted when the branches are merged. Git can tell which lines of code were in the originally in both branches, by looking back to the previous version when they were not branched. The diagramatical representation is easier to follow, and shows where the commits initially branched, and the latest commits in both of the branches and finally how merging the two branches shows both of its new parents. 

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

If git were to automatically merge for you it would cause some problems such as adding two features that are the same which could cause bugs. A con of always doing merges manually is having to discuss what should be left in the program and what should be deleted, and the program needs to be edited each time. The automatic merging so that could have cons where if one person deleted a line in their program but the other person didn't and their code relied on that line then git would delete that line when it is merged and it would cause bugs.

use git branch -m <oldname> <newname> to rename a local branch, or use git branch -m <newname> when in the current branch you wish to rename.